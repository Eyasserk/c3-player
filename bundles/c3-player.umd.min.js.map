{"version":3,"sources":["ng://c3-player/src/app/services/math.service.ts","ng://c3-player/src/app/models/event-type.enum.ts","ng://c3-player/src/app/services/kurento.service.ts","ng://c3-player/src/app/services/event.service.ts","ng://c3-player/src/app/modules/c3player/c3player.component.ts","ng://c3-player/src/app/modules/c3player/c3player.module.ts"],"names":["MathService","prototype","pad","i","padm","toFixed","Injectable","args","providedIn","RemotePlayStarted","RemotePlayStopped","RemotePlayPaused","RemotePlayResumed","RemotePlayEnded","RemotePlaySeeked","RemotePlayFailed","RemoteConnectionReset","RemoteSeekFailed","LocalConnectionError","LocalAudioLevel","LocalAudioLevelError","WebSocketFailed","KurentoService","ws","audioSource","video","eventService","this","start","millis","_this","console","log","options","remoteVideo","nativeElement","mediaConstraints","audio","onicecandidate","candidate","JSON","stringify","message","id","sendMessage","error","event_1","type","EventType","value","reason","Emitter","next","webRtcPeer","WebRtcPeer","WebRtcPeerRecvonly","event_2","at","generateOffer","sdp","event_3","sdpOffer","position","videourl","event_4","stop","dispose","event_5","event_6","event_7","resetConnection","event_8","event_9","doSeekAt","time","toString","event_10","seekTime","event_11","pause","event_12","event_13","resume","event_14","event_15","mute","getRemoteStream","getAudioTracks","forEach","track","enabled","event_16","action","event_17","event_18","unmute","event_19","event_20","event_21","processAnswer","sdpAnswer","callback","addIceCandidate","readyState","Error","send","EventService","emitter","BehaviorSubject","Object","defineProperty","C3playerComponent","mathService","spinner","modalService","viewRef","wantedTime","componentWidth","componentMargin","imgRelation","subscribe","event","hide","playing","displayErrorMessage","firstTime","playedTime","kurentoService","muted","ngOnInit","wsConnected","offset","Math","round","totalDuration","tooltipDisplay","style","display","_timer","timer","pipe","filter","t","WebSocket","wsUrl","context","onopen","e","onclose","onerror","onmessage","data","parse","videoDuration","ngAfterViewInit","setTimeout","componentHeight","player","offsetWidth","ngOnDestroy","unsubscribe","close","getPlayedHours","floor","getPlayedMinutes","getPlayedSeconds","getTotalHours","getTotalMinutes","getTotalSeconds","getWantedHours","getWantedMinutes","getWantedSeconds","getSeekPosition","play","show","seekClicked","seekReleased","clicked","offsetX","seekDragged","onDragStart","onDragEnd","onMouseOverSeek","transform","offsetY","onMouseExitSeek","onMouseMoveSeek","openDialog","title","childComponent","SimpleModalComponent","text","settings","closeButtonClass","headerTitleClass","actionButtons","buttonClass","onAction","Promise","resolve","switchSound","Component","selector","template","NgxSpinnerService","ModalDialogService","ViewContainerRef","ViewChild","Input","C3playerModule","NgModule","imports","CommonModule","BrowserAnimationsModule","MatSliderModule","NgxSpinnerModule","ModalDialogModule","forRoot","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MathService {\n\n  constructor() {}\n\n  pad(i: number): String{\n    return (i < 10) ? \"0\"+i : \"\"+i; \n  }\n\n  padm(i: number): String{\n    return (i < 10) ? \"0\"+i.toFixed(1) : \"\"+i.toFixed(1);\n  }\n}\n","export enum EventType {\n    RemotePlayStarted,\n    RemotePlayStopped,\n    RemotePlayPaused,\n    RemotePlayResumed,\n    RemotePlayEnded,\n    RemotePlaySeeked,\n    RemotePlayFailed,\n    RemoteConnectionReset,\n    RemoteSeekFailed,\n    LocalConnectionError,\n    LocalAudioLevel,\n    LocalAudioLevelError,\n    WebSocketFailed\n}\n","import { WebRtcPeer } from 'kurento-utils-browser';\nimport { ElementRef } from '@angular/core';\nimport { EventService } from './event.service';\nimport { C3event } from '../models/c3event';\nimport { EventType } from '../models/event-type.enum';\n\nexport class KurentoService {\n\n  private webRtcPeer: WebRtcPeer;\n\n  /**\n   * Creates a new Kurento Service\n   * @param ws WEb Socket Connection\n   * @param audioSource Audio URL\n   */\n  constructor(private ws: WebSocket, private audioSource: string, private video: ElementRef, private eventService: EventService) {\n    \n  }\n\n  /**\n   * Starts playing the streamed audio\n   */\n  start(millis: number): void{\n    console.log(\"RTC service: Playing audio at initial position: \"+millis);\n    let userMediaConstraints = {\n      audio: true,\n      video: false\n    }\n    let options = {\n      remoteVideo: this.video.nativeElement,\n      mediaConstraints: userMediaConstraints,\n      onicecandidate: (candidate: any) => {\n        console.log('RTC service: Local candidate ' + JSON.stringify(candidate));\n        let message = {\n          id: 'onIceCandidate',\n          candidate: candidate\n        }\n        try{\n          this.sendMessage(message);\n        }catch(error){\n          let event : C3event = {type: EventType.WebSocketFailed, value: {reason:error}};\n          this.eventService.Emitter.next(event);\n        }\n      }\n    }\n    this.webRtcPeer = WebRtcPeer.WebRtcPeerRecvonly(options, (error: String) => {\n      if(error){\n        console.error(\"Error creating the peer connection: %s\", error);\n        let event : C3event = {type: EventType.RemotePlayFailed, value: {at:\"start\", reason:error}};\n        this.eventService.Emitter.next(event);\n      }else{\n        this.webRtcPeer.generateOffer((error: String, sdp: String) => {\n          if(error){\n            console.error(\"Error generating the offer: %s\", error);\n            let event : C3event = {type: EventType.RemotePlayFailed, value: {at:\"start\", reason:error}};\n            this.eventService.Emitter.next(event);\n          }else{\n            let message = {\n              id: 'start',\n              sdpOffer: sdp,\n              position: millis,\n              videourl: this.audioSource\n            }\n            console.log(\"Sending start message\");\n            try{\n              this.sendMessage(message);\n            }catch(error){\n              let event : C3event = {type: EventType.WebSocketFailed, value: {reason:error}};\n              this.eventService.Emitter.next(event);\n            }\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Stops the streaming\n   */\n  stop(): void{\n    console.log(\"RTC service: Stopping audio\");\n    if (this.webRtcPeer) {\n      try{\n        this.webRtcPeer.dispose();\n        this.webRtcPeer = null;\n        var message = {\n            id: 'stop'\n        }\n        this.sendMessage(message);\n        let event : C3event = {type: EventType.RemotePlayStopped, value: {}};\n        this.eventService.Emitter.next(event);\n      }catch(error){\n        console.error(\"Error stopping the player: %s\", error);\n        let event : C3event = {type: EventType.RemotePlayFailed, value: {at:\"stop\", reason:error}};\n        this.eventService.Emitter.next(event);\n      }\n    }else{\n      console.error(\"Error stopping the player: peer connection is closed\");\n      let event : C3event = {type: EventType.RemotePlayFailed, value: {at:\"stop\", reason:\"Peer connection is closed\"}};\n      this.eventService.Emitter.next(event);\n    }\n  }\n\n  /**\n   * Resets the Peer connection\n   */\n  resetConnection(): void{\n    console.log(\"RTC service: resetting peer connection\");\n    if(this.webRtcPeer){\n      try{\n        this.webRtcPeer.dispose();\n        this.webRtcPeer = null;\n        let event : C3event = {type: EventType.RemoteConnectionReset, value: {}};\n        this.eventService.Emitter.next(event);\n      }catch(error){\n        console.error(\"Error resetting the peer connection: %s\", error);\n        let event : C3event = {type: EventType.LocalConnectionError, value: {at: \"resetConnection\", reason:error}};\n        this.eventService.Emitter.next(event);\n      }\n    }\n  }\n\n  /**\n   * Moves to the specified millisecond\n   * @param time: played time in milliseconds\n   */\n  doSeekAt(time: number): void{\n    console.log(\"RTC service: doing seek at %s\", time.toString());\n    try{\n      var message = {\n        id: 'doSeek',\n        position: time\n      }\n      this.sendMessage(message);\n      let event : C3event = {type: EventType.RemotePlaySeeked, value: {seekTime: time}};\n      this.eventService.Emitter.next(event);\n    }catch(error){\n      console.error(\"Error doing seek: %s\", error);\n      let event : C3event = {type: EventType.RemoteSeekFailed, value: {at: \"doSeek\", reason:error}};\n      this.eventService.Emitter.next(event);\n    }\n  }\n\n  /**\n   * Pauses the streaming\n   */\n  pause(): void{\n    console.log(\"RTC service: Pausing audio\");\n    try{\n      var message = {\n        id: 'pause'\n      }\n      this.sendMessage(message);\n      let event : C3event = {type: EventType.RemotePlayPaused, value: {}};\n      this.eventService.Emitter.next(event);\n    }catch(error){\n      console.error(\"Error pausing the streaming: %s\", error);\n      let event : C3event = {type: EventType.RemotePlayFailed, value: {at: \"pause\", reason:error}};\n      this.eventService.Emitter.next(event);\n    }\n  }\n\n  /**\n   * Resumes the streaming\n   */\n  resume(): void{\n    console.log(\"RTC service: Resuming audio\");\n    try{\n      var message = {\n        id: 'resume'\n      }\n      this.sendMessage(message);\n      let event : C3event = {type: EventType.RemotePlayResumed, value: {}};\n      this.eventService.Emitter.next(event);\n    }catch(error){\n      console.error(\"Error resuming the streaming: %s\", error);\n      let event : C3event = {type: EventType.WebSocketFailed, value: {reason:error}};\n      this.eventService.Emitter.next(event);\n    }\n  }\n\n  mute(): void{\n    if(this.webRtcPeer){\n      try{\n        this.webRtcPeer.getRemoteStream().getAudioTracks().forEach(track => {\n          track.enabled = false;\n        });\n        let event : C3event = {type: EventType.LocalAudioLevel, value: {action:\"mute\"}};\n        this.eventService.Emitter.next(event);\n      }catch(error){\n        console.error(\"Error muting audio: %s\", error);\n        let event : C3event = {type: EventType.LocalAudioLevelError, value: {at: \"mute\", reason:error}};\n        this.eventService.Emitter.next(event);\n      }\n    }else{\n      let event : C3event = {type: EventType.LocalAudioLevel, value: {action:\"mute\"}};\n      this.eventService.Emitter.next(event);\n    }\n  }\n\n  unmute(): void{\n    if(this.webRtcPeer){\n      try{\n        this.webRtcPeer.getRemoteStream().getAudioTracks().forEach(track => {\n          track.enabled = true;\n        });\n        let event : C3event = {type: EventType.LocalAudioLevel, value: {action:\"unmute\"}};\n        this.eventService.Emitter.next(event);\n      }catch(error){\n        console.error(\"Error unmuting audio: %s\", error);\n        let event : C3event = {type: EventType.LocalAudioLevelError, value: {at: \"unmute\", reason:error}};\n        this.eventService.Emitter.next(event);\n      }\n    }else{\n      let event : C3event = {type: EventType.LocalAudioLevel, value: {action:\"unmute\"}};\n      this.eventService.Emitter.next(event);\n    }\n  }\n\n  /**\n   * Processes the SDP answer\n   * @param sdpAnswer SDP answer as string\n   * @param callback callback\n   */\n  processAnswer(sdpAnswer: string, callback: (error: string) => void) :void{\n    console.log(\"RTC service: Processing SDP answer: %s\", sdpAnswer);\n    this.webRtcPeer.processAnswer(sdpAnswer, callback);\n  }\n\n  /**\n   * Adds ICE candidate\n   * @param candidate candidate\n   * @param callback callback\n   */\n  addIceCandidate(candidate: RTCIceCandidate, callback: (error: string) => void): void{\n    console.log(\"RTC service: Adding Ice Candidate: %s\", JSON.stringify(candidate));\n    this.webRtcPeer.addIceCandidate(candidate, callback);\n  }\n\n  sendMessage(message: object): void{\n    if(this.ws.readyState == 1){\n      this.ws.send(JSON.stringify(message));\n    }else{\n      throw new Error(\"Websocket is closed\");\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { C3event } from '../models/c3event';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EventService {\n\n  private emitter: BehaviorSubject<C3event>;\n  constructor() {\n    this.emitter = new BehaviorSubject<C3event>(null);\n  }\n\n  get Emitter(): BehaviorSubject<C3event>{\n    return this.emitter;\n  }\n}\n","import { Component, Input, OnInit, OnDestroy, ViewChild, ElementRef, ViewContainerRef, AfterViewInit} from '@angular/core';\n\nimport { BehaviorSubject, timer, Subscription} from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { MathService } from '../../services/math.service';\nimport { KurentoService } from '../../services/kurento.service';\nimport { EventService } from '../../services/event.service';\nimport { C3event } from '../../models/c3event';\nimport { EventType } from '../../models/event-type.enum';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { ModalDialogService, SimpleModalComponent } from 'ngx-modal-dialog';\n\n@Component({\n  selector: 'c3-player',\n  templateUrl: './c3player.component.html',\n  styleUrls: ['./c3player.component.css']\n})\nexport class C3playerComponent implements OnInit, OnDestroy, AfterViewInit{\n\n  private ws: WebSocket;\n\n  //Kurento service\n  private kurentoService: KurentoService;\n\n  //timer for play time\n  private _timer: Subscription;\n  private offset: number; //max difference between remote and local play\n\n  //handle if component is playing\n  playing: BehaviorSubject<boolean>;\n  private wsConnected: BehaviorSubject<boolean>;\n\n  private playedTime: number; //milliseconds\n  private wantedTime: number = 0; //tooltip\n\n  @ViewChild('tooltipDisplay') tooltipDisplay: ElementRef;\n  @ViewChild('c3player') player: ElementRef; \n  @ViewChild('videoelement') video: ElementRef;\n\n  //\n  @Input('image')\n  imageSource: string; \n  @Input('audio')\n  audioSource: string;\n  @Input('wsUrl')\n  wsUrl: string;\n  @Input('duration')\n  totalDuration: number;\n  @Input('width')\n  componentWidth: string = \"100%\";\n  @Input('margin')\n  componentMargin: string = \"auto\"; \n  @Input('img-dim')\n  imgRelation: number = 5;\n\n  muted: BehaviorSubject<boolean>;\n\n  private firstTime: BehaviorSubject<boolean>;\n  componentHeight: string;\n\n  constructor(private mathService: MathService, private eventService: EventService, private spinner: NgxSpinnerService,\n              private modalService: ModalDialogService, private viewRef: ViewContainerRef){\n    eventService.Emitter.subscribe((event: C3event) => {\n      if(event){\n        switch(event.type){\n          case EventType.LocalConnectionError: {\n            this.spinner.hide();\n            this.playing.next(false);\n            this.displayErrorMessage(\"Error in connection\");\n            break; \n          }\n          case EventType.RemotePlayStarted: {\n            this.firstTime.next(false);\n            if(this.playedTime > 0){\n              this.kurentoService.doSeekAt(this.playedTime);\n            }\n            this.playing.next(true);\n            this.spinner.hide();\n            break;\n          }\n          case EventType.RemotePlayPaused: {\n            this.spinner.hide();\n            this.playing.next(false);\n            break;\n          }\n          case EventType.RemotePlayStopped: {\n            this.spinner.hide();\n            this.playedTime = 0;\n            this.firstTime.next(true);\n            this.playing.next(false);\n            break;\n          }\n          case EventType.RemotePlayEnded: {\n            this.playing.next(false);\n            this.playedTime = 0;\n            break;\n          }\n          case EventType.RemotePlaySeeked: {\n            this.playedTime = event.value.seekTime;\n            this.spinner.hide();\n            break;\n          }\n          case EventType.RemoteSeekFailed: {\n            this.spinner.hide();\n            this.playing.next(false);\n            this.displayErrorMessage(\"Server error\");\n            break; \n          }\n          case EventType.RemotePlayResumed: {\n            this.spinner.hide();\n            this.playing.next(true);\n            break;\n          }\n          case EventType.WebSocketFailed: {\n            this.spinner.hide();\n            this.displayErrorMessage(\"Connection to the server failed\");\n            break;\n          }\n          case EventType.LocalAudioLevel: {\n            if(event.value && event.value.action){\n              switch(event.value.action){\n                case \"mute\":{\n                  this.muted.next(true);\n                  break;\n                }\n                case \"unmute\":{\n                  this.muted.next(false);\n                  break;\n                }\n                default:{\n                  console.error(\"Received unknown Local Audio Level event: %s\", event.value.action);\n                }\n              }\n            }else{\n              console.error(\"Received incorrect Local Audio Level event: %s\", JSON.stringify(event));\n            }\n            break;\n          }\n          case EventType.LocalAudioLevelError:{\n            this.displayErrorMessage(\"Error at audio control\");\n            break;\n          }\n          case EventType.RemotePlayFailed: {\n            this.spinner.hide();\n            this.playing.next(false);\n            break;\n          }\n          case EventType.RemoteConnectionReset: {\n            this.spinner.hide();\n            this.firstTime.next(true);\n            this.playing.next(false);\n            this.playedTime = 0;\n          }\n          default: {\n            console.error(\"Unrecognized event type '%s'\", event.type);\n          }\n        }\n      } \n    });\n  }\n\n  ngOnInit() {\n    //Initializing global variables\n    this.firstTime = new BehaviorSubject<boolean>(true);\n    this.wsConnected = new BehaviorSubject<boolean>(false);\n    this.muted = new BehaviorSubject<boolean>(false);\n    this.playedTime = 0;\n    this.offset = Math.round(this.totalDuration / 100);\n    if(this.offset < 1000){\n      this.offset = 1000;\n    }\n    if(this.offset > 4000){\n      this.offset = 4000;\n    }\n    this.playing = new BehaviorSubject<boolean>(false);\n    this.tooltipDisplay.nativeElement.style.display = \"none\";\n    this.spinner.hide();\n\n    //Play timer\n    this._timer = timer(0,100).pipe(filter(() => this.playing.value === true)).subscribe(t => {\n      this.playedTime += 100;\n      if(this.playedTime >= (this.totalDuration + this.offset)){\n        this.stop();\n      }\n    });\n    \n    //Connection\n    this.ws = new WebSocket(this.wsUrl);\n    this.kurentoService = new KurentoService(this.ws, this.audioSource, this.video, this.eventService);\n\n    //WebSocket event handling\n    const context = this;\n    this.ws.onopen = (e: Event) => {\n      console.log(\"C3player service: Connection established with Kurento\");\n      context.wsConnected.next(true);\n    }\n    this.ws.onclose = (e: CloseEvent) => {\n      this.spinner.hide();\n      console.log(\"C3Player service: Connection closed\");\n      context.wsConnected.next(false);\n      context.stop();\n    }\n    this.ws.onerror = (e: Event) => {\n      this.spinner.hide();\n      console.error(\"An error has occured: %s\", e);\n      this.displayErrorMessage(\"Connection with server failed\");\n      context.stop();\n    }\n    this.ws.onmessage = (e: MessageEvent) => {\n      console.log(\"Message received: \"+e.data);\n      let message = JSON.parse(e.data);\n      switch(message.id){\n        case \"playStarted\":{\n          let event : C3event = {type: EventType.RemotePlayStarted, value: {}};\n          this.eventService.Emitter.next(event);\n          break;\n        }\n        case \"startResponse\": {\n          console.log(\"Received start response\");\n          context.kurentoService.processAnswer(message.sdpAnswer, (error: string) => {\n            if(error){\n              console.error(\"Error processing response: %s\", error);\n            }else{\n              console.log(\"C3Player service: SDP response processed\");\n            }\n          });\n          break;\n        }\n        case \"error\": {\n          console.error(\"Error in websocket: %s\", message.message);\n          break;\n        }\n        case \"playEnd\": {\n          console.log(\"C3Player service: Play ended\");\n          context.firstTime.next(true);\n          context.playing.next(false);\n          context.playedTime = 0;\n          break;\n        }\n        case \"videoInfo\": {\n          context.totalDuration = message.videoDuration;\n          break;\n        }\n        case \"iceCandidate\": {\n          context.kurentoService.addIceCandidate(message.candidate, (error: string) =>{\n            if(error){\n              console.error(\"Error adding candidate: %s\", error);\n            }else{\n              console.log(\"Added candidate %s\", JSON.stringify(message.candidate));\n            }\n          });\n          break;\n        }\n        case \"seek\": {\n          console.log(\"C3Player service: Seek Done -> %s\", message.message);\n          if(message.message !== \"ok\"){\n            this.displayErrorMessage(\"An error has occured\");\n          }\n          break;\n        }\n        case \"position\": {\n          context.playedTime = message.position;\n          break;\n        }\n        default: {\n          console.log(\"C3Player service: Unrecognized message received -> %s\", message.id);\n        }\n      }\n    }\n  }\n\n  ngAfterViewInit(){\n    setTimeout(() => \n      this.componentHeight = Math.round(this.player.nativeElement.offsetWidth / this.imgRelation) +\"px\"\n    )\n  }\n\n  ngOnDestroy(){\n    this._timer.unsubscribe();\n    this.kurentoService.resetConnection();\n    this.ws.close();\n  }\n\n  getPlayedHours(): String{\n    return this.mathService.pad(Math.floor(this.playedTime / 3600000));\n  }\n\n  getPlayedMinutes(): String{\n    return this.mathService.pad(Math.floor(((this.playedTime / 1000) % 3600) / 60));\n  }\n\n  getPlayedSeconds(): String{\n    return this.mathService.padm((this.playedTime/1000) % 60);\n  }\n\n  getTotalHours(): String{\n    return this.mathService.pad(Math.floor(this.totalDuration / 3600000));\n  }\n\n  getTotalMinutes(): String{\n    return this.mathService.pad(Math.floor(((this.totalDuration / 1000) % 3600) / 60));\n  }\n\n  getTotalSeconds(): String{\n    return this.mathService.pad(Math.round(this.totalDuration/1000) % 60);\n  }\n\n  getWantedHours(): String{\n    return this.mathService.pad(Math.floor(this.wantedTime / 3600000));\n  }\n\n  getWantedMinutes(): String{\n    return this.mathService.pad(Math.floor(((this.wantedTime / 1000) % 3600) / 60));\n  }\n\n  getWantedSeconds(): String{\n    return this.mathService.pad(Math.floor((this.wantedTime/1000) % 60));\n  }\n\n  getSeekPosition(){\n    return Math.floor((this.playedTime/this.totalDuration)*this.player.nativeElement.offsetWidth);\n  }\n\n  /**\n   * TODO implementar metodos\n   */\n  play(): void{\n    if(this.playing.value === true){\n       //Pause the video\n      this.kurentoService.pause();\n    }else{\n      if(this.firstTime.value === true){\n        //Play\n        this.spinner.show();\n        this.kurentoService.unmute();\n        this.kurentoService.start(this.playedTime);\n      }else{\n        //Resume\n        this.spinner.show();\n        this.kurentoService.resume();\n      }\n    }\n  }\n\n  stop(): void{\n    if(this.wsConnected.value === true){\n      this.kurentoService.unmute();\n      this.kurentoService.stop();\n    }else{\n      this.playedTime = 0;\n      this.firstTime.next(true);\n      this.playing.next(false);\n    }\n  }\n\n  seekClicked(event): void{\n    \n  }\n\n  seekReleased(event: MouseEvent): void{\n    //set playedTime and seekPosition\n    this.spinner.show();\n    let clicked: number = Math.floor(this.totalDuration*(event.offsetX/this.player.nativeElement.offsetWidth));\n    this.kurentoService.doSeekAt(clicked);\n  }\n\n  seekDragged(): void{\n    console.log(\"Seek dragged\");\n  }\n\n  onDragStart(event){\n    console.log(\"Drag start\");\n  }\n\n  onDragEnd(event){\n    console.log(\"Drag end\");\n  }\n\n  onMouseOverSeek(event: MouseEvent){\n    this.tooltipDisplay.nativeElement.style.display = \"inline-block\";\n    this.tooltipDisplay.nativeElement.style.transform = \"translate(\"+event.offsetX+\"px,\"+(15+event.offsetY)+\"px)\";\n  }\n\n  onMouseExitSeek(event: MouseEvent){\n    this.tooltipDisplay.nativeElement.style.display = \"none\";\n  }\n\n  onMouseMoveSeek(event: MouseEvent){\n    this.wantedTime = Math.floor(this.totalDuration*(event.offsetX/this.player.nativeElement.offsetWidth));\n    if(this.player.nativeElement.offsetWidth - event.offsetX <= 55){\n      this.tooltipDisplay.nativeElement.style.transform = \"translate(\"+(event.offsetX - 55)+\"px,\"+(15+event.offsetY)+\"px)\";\n    }else{\n      this.tooltipDisplay.nativeElement.style.transform = \"translate(\"+event.offsetX+\"px,\"+(15+event.offsetY)+\"px)\";\n    }\n  }\n\n  displayErrorMessage(error: string) : void{\n    this.modalService.openDialog(this.viewRef, {\n      title: 'Error',\n      childComponent: SimpleModalComponent,\n      data: {\n        text: \"Error occured while playing the audio: <strong>\"+error+\"</strong>\"\n      },\n      settings: {\n        closeButtonClass: 'close theme-icon-close',\n        headerTitleClass: \"text-danger\"\n      },\n      actionButtons: [\n        {\n          text: 'Close',\n          buttonClass: \"btn btn-default\",\n          onAction: () => new Promise((resolve:any) => {\n            resolve()\n          })\n        }\n      ]\n    });\n  }\n\n  switchSound(): void{\n    if(this.muted.value === true){\n      this.kurentoService.unmute();\n    }else{\n      this.kurentoService.mute();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { C3playerComponent } from './c3player.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { NgxSpinnerModule } from 'ngx-spinner';\nimport { ModalDialogModule } from 'ngx-modal-dialog';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    BrowserAnimationsModule,\n    MatSliderModule,\n    NgxSpinnerModule,\n    ModalDialogModule.forRoot()\n  ],\n  declarations: [C3playerComponent],\n  exports: [\n    C3playerComponent,\n    MatSliderModule,\n    NgxSpinnerModule,\n    ModalDialogModule,\n    BrowserAnimationsModule\n  ]\n})\nexport class C3playerModule { }\n"]}