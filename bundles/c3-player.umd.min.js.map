{"version":3,"sources":["ng://c3-player/src/app/services/math.service.ts","ng://c3-player/src/app/models/event-type.enum.ts","ng://c3-player/src/app/services/kurento.service.ts","ng://c3-player/src/app/services/event.service.ts","ng://c3-player/src/app/modules/c3player/c3player.component.ts","ng://c3-player/src/app/modules/c3player/c3player.module.ts"],"names":["MathService","prototype","pad","i","padm","toFixed","Injectable","args","providedIn","RemotePlayStarted","RemotePlayStopped","RemotePlayPaused","RemotePlayResumed","RemotePlayEnded","RemotePlaySeeked","RemotePlayFailed","RemoteConnectionReset","RemoteSeekFailed","LocalConnectionError","LocalAudioLevel","LocalAudioLevelError","KurentoService","ws","audioSource","video","eventService","this","start","millis","_this","console","log","options","remoteVideo","nativeElement","mediaConstraints","audio","onicecandidate","candidate","JSON","stringify","message","id","send","webRtcPeer","WebRtcPeer","WebRtcPeerRecvonly","error","event_1","type","EventType","value","at","reason","Emitter","next","generateOffer","sdp","event_2","sdpOffer","position","videourl","stop","dispose","event_3","event_4","event_5","resetConnection","event_6","event_7","doSeekAt","time","toString","event_8","seekTime","event_9","pause","event_10","event_11","resume","event_12","event_13","mute","getRemoteStream","getAudioTracks","forEach","track","enabled","event_14","action","event_15","unmute","event_16","event_17","processAnswer","sdpAnswer","callback","addIceCandidate","EventService","emitter","BehaviorSubject","Object","defineProperty","C3playerComponent","mathService","wantedTime","subscribe","event","spinnerDisplay","playing","displayErrorMessage","playedTime","firstTime","muted","ngOnInit","wsConnected","offset","Math","round","totalDuration","tooltipDisplay","style","display","_timer","timer","pipe","filter","t","WebSocket","wsUrl","kurentoService","context","onopen","e","onclose","onerror","onmessage","data","parse","videoDuration","ngOnDestroy","unsubscribe","close","getPlayedHours","floor","getPlayedMinutes","getPlayedSeconds","getTotalHours","getTotalMinutes","getTotalSeconds","getWantedHours","getWantedMinutes","getWantedSeconds","getSeekPosition","player","offsetWidth","play","seekClicked","seekReleased","clicked","offsetX","seekDragged","onDragStart","onDragEnd","onMouseOverSeek","transform","offsetY","onMouseExitSeek","onMouseMoveSeek","switchSound","Component","selector","template","ViewChild","Input","C3playerModule","NgModule","imports","CommonModule","BrowserAnimationsModule","MatSliderModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MathService {\n\n  constructor() {}\n\n  pad(i: number): String{\n    return (i < 10) ? \"0\"+i : \"\"+i; \n  }\n\n  padm(i: number): String{\n    return (i < 10) ? \"0\"+i.toFixed(1) : \"\"+i.toFixed(1);\n  }\n}\n","export enum EventType {\n    RemotePlayStarted,\n    RemotePlayStopped,\n    RemotePlayPaused,\n    RemotePlayResumed,\n    RemotePlayEnded,\n    RemotePlaySeeked,\n    RemotePlayFailed,\n    RemoteConnectionReset,\n    RemoteSeekFailed,\n    LocalConnectionError,\n    LocalAudioLevel,\n    LocalAudioLevelError\n}\n","import { WebRtcPeer } from 'kurento-utils-browser';\nimport { ElementRef } from '@angular/core';\nimport { EventService } from './event.service';\nimport { C3event } from '../models/c3event';\nimport { EventType } from '../models/event-type.enum';\n\nexport class KurentoService {\n\n  private webRtcPeer: WebRtcPeer;\n\n  /**\n   * Creates a new Kurento Service\n   * @param ws WEb Socket Connection\n   * @param audioSource Audio URL\n   */\n  constructor(private ws: WebSocket, private audioSource: string, private video: ElementRef, private eventService: EventService) {\n    \n  }\n\n  /**\n   * Starts playing the streamed audio\n   */\n  start(millis: number): void{\n    console.log(\"RTC service: Playing audio at initial position: \"+millis);\n    let userMediaConstraints = {\n      audio: true,\n      video: false\n    }\n    let options = {\n      remoteVideo: this.video.nativeElement,\n      mediaConstraints: userMediaConstraints,\n      onicecandidate: (candidate: any) => {\n        console.log('RTC service: Local candidate ' + JSON.stringify(candidate));\n        let message = {\n          id: 'onIceCandidate',\n          candidate: candidate\n        }\n        this.ws.send(JSON.stringify(message));\n      }\n    }\n    this.webRtcPeer = WebRtcPeer.WebRtcPeerRecvonly(options, (error: String) => {\n      if(error){\n        console.error(\"Error creating the peer connection: %s\", error);\n        let event : C3event = {type: EventType.RemotePlayFailed, value: {at:\"start\", reason:error}};\n        this.eventService.Emitter.next(event);\n      }else{\n        this.webRtcPeer.generateOffer((error: String, sdp: String) => {\n          if(error){\n            console.error(\"Error generating the offer: %s\", error);\n            let event : C3event = {type: EventType.RemotePlayFailed, value: {at:\"start\", reason:error}};\n            this.eventService.Emitter.next(event);\n          }else{\n            let message = {\n              id: 'start',\n              sdpOffer: sdp,\n              position: millis,\n              videourl: this.audioSource\n            }\n            console.log(\"Sending start message\");\n            this.ws.send(JSON.stringify(message));\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Stops the streaming\n   */\n  stop(): void{\n    console.log(\"RTC service: Stopping audio\");\n    if (this.webRtcPeer) {\n      try{\n        this.webRtcPeer.dispose();\n        this.webRtcPeer = null;\n        var message = {\n            id: 'stop'\n        }\n        this.ws.send(JSON.stringify(message));\n        let event : C3event = {type: EventType.RemotePlayStopped, value: {}};\n        this.eventService.Emitter.next(event);\n      }catch(error){\n        console.error(\"Error stopping the player: %s\", error);\n        let event : C3event = {type: EventType.RemotePlayFailed, value: {at:\"stop\", reason:error}};\n        this.eventService.Emitter.next(event);\n      }\n    }else{\n      console.error(\"Error stopping the player: peer connection is closed\");\n      let event : C3event = {type: EventType.RemotePlayFailed, value: {at:\"stop\", reason:\"Peer connection is closed\"}};\n      this.eventService.Emitter.next(event);\n    }\n  }\n\n  /**\n   * Resets the Peer connection\n   */\n  resetConnection(): void{\n    console.log(\"RTC service: resetting peer connection\");\n    if(this.webRtcPeer){\n      try{\n        this.webRtcPeer.dispose();\n        this.webRtcPeer = null;\n        let event : C3event = {type: EventType.RemoteConnectionReset, value: {}};\n        this.eventService.Emitter.next(event);\n      }catch(error){\n        console.error(\"Error resetting the peer connection: %s\", error);\n        let event : C3event = {type: EventType.LocalConnectionError, value: {at: \"resetConnection\", reason:error}};\n        this.eventService.Emitter.next(event);\n      }\n    }\n  }\n\n  /**\n   * Moves to the specified millisecond\n   * @param time: played time in milliseconds\n   */\n  doSeekAt(time: number): void{\n    console.log(\"RTC service: doing seek at %s\", time.toString());\n    try{\n      var message = {\n        id: 'doSeek',\n        position: time\n      }\n      this.ws.send(JSON.stringify(message));\n      let event : C3event = {type: EventType.RemotePlaySeeked, value: {seekTime: time}};\n      this.eventService.Emitter.next(event);\n    }catch(error){\n      console.error(\"Error doing seek: %s\", error);\n      let event : C3event = {type: EventType.RemoteSeekFailed, value: {at: \"doSeek\", reason:error}};\n      this.eventService.Emitter.next(event);\n    }\n  }\n\n  /**\n   * Pauses the streaming\n   */\n  pause(): void{\n    console.log(\"RTC service: Pausing audio\");\n    try{\n      var message = {\n        id: 'pause'\n      }\n      this.ws.send(JSON.stringify(message));\n      let event : C3event = {type: EventType.RemotePlayPaused, value: {}};\n      this.eventService.Emitter.next(event);\n    }catch(error){\n      console.error(\"Error pausing the streaming: %s\", error);\n      let event : C3event = {type: EventType.RemotePlayFailed, value: {at: \"pause\", reason:error}};\n      this.eventService.Emitter.next(event);\n    }\n  }\n\n  /**\n   * Resumes the streaming\n   */\n  resume(): void{\n    console.log(\"RTC service: Resuming audio\");\n    try{\n      var message = {\n        id: 'resume'\n      }\n      this.ws.send(JSON.stringify(message));\n      let event : C3event = {type: EventType.RemotePlayResumed, value: {}};\n      this.eventService.Emitter.next(event);\n    }catch(error){\n      console.error(\"Error resuming the streaming: %s\", error);\n      let event : C3event = {type: EventType.RemotePlayFailed, value: {at: \"resume\", reason:error}};\n      this.eventService.Emitter.next(event);\n    }\n  }\n\n  mute(): void{\n    try{\n      this.webRtcPeer.getRemoteStream().getAudioTracks().forEach(track => {\n        track.enabled = false;\n      });\n      let event : C3event = {type: EventType.LocalAudioLevel, value: {action:\"mute\"}};\n      this.eventService.Emitter.next(event);\n    }catch(error){\n      console.error(\"Error muting audio: %s\", error);\n      let event : C3event = {type: EventType.LocalAudioLevelError, value: {at: \"mute\", reason:error}};\n      this.eventService.Emitter.next(event);\n    }\n  }\n\n  unmute(): void{\n    try{\n      this.webRtcPeer.getRemoteStream().getAudioTracks().forEach(track => {\n        track.enabled = true;\n      });\n      let event : C3event = {type: EventType.LocalAudioLevel, value: {action:\"unmute\"}};\n      this.eventService.Emitter.next(event);\n    }catch(error){\n      console.error(\"Error unmuting audio: %s\", error);\n      let event : C3event = {type: EventType.LocalAudioLevelError, value: {at: \"unmute\", reason:error}};\n      this.eventService.Emitter.next(event);\n    }\n  }\n\n  /**\n   * Processes the SDP answer\n   * @param sdpAnswer SDP answer as string\n   * @param callback callback\n   */\n  processAnswer(sdpAnswer: string, callback: (error: string) => void) :void{\n    console.log(\"RTC service: Processing SDP answer: %s\", sdpAnswer);\n    this.webRtcPeer.processAnswer(sdpAnswer, callback);\n  }\n\n  /**\n   * Adds ICE candidate\n   * @param candidate candidate\n   * @param callback callback\n   */\n  addIceCandidate(candidate: RTCIceCandidate, callback: (error: string) => void): void{\n    console.log(\"RTC service: Adding Ice Candidate: %s\", JSON.stringify(candidate));\n    this.webRtcPeer.addIceCandidate(candidate, callback);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { C3event } from '../models/c3event';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EventService {\n\n  private emitter: BehaviorSubject<C3event>;\n  constructor() {\n    this.emitter = new BehaviorSubject<C3event>(null);\n  }\n\n  get Emitter(): BehaviorSubject<C3event>{\n    return this.emitter;\n  }\n}\n","import { Component, Input, OnInit, OnDestroy, ViewChild, ElementRef} from '@angular/core';\n\nimport { BehaviorSubject, timer, Subscription} from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { MathService } from '../../services/math.service';\nimport { KurentoService } from '../../services/kurento.service';\nimport { EventService } from '../../services/event.service';\nimport { C3event } from '../../models/c3event';\nimport { EventType } from '../../models/event-type.enum';\n\n@Component({\n  selector: 'c3-player',\n  templateUrl: './c3player.component.html',\n  styleUrls: ['./c3player.component.css']\n})\nexport class C3playerComponent implements OnInit, OnDestroy {\n\n  private ws: WebSocket;\n\n  //Kurento service\n  private kurentoService: KurentoService;\n\n  //timer for play time\n  private _timer: Subscription;\n  private offset: number; //max difference between remote and local play\n\n  //handle if component is playing\n  playing: BehaviorSubject<boolean>;\n  private wsConnected: BehaviorSubject<boolean>;\n\n  //Play handling\n  private playedTime: number; //milliseconds\n  @ViewChild('tooltipDisplay') tooltipDisplay: ElementRef;\n  private wantedTime: number = 0; //tooltip\n\n  //Own component\n  @ViewChild('c3player') player: ElementRef; \n\n  @ViewChild('videoelement') video: ElementRef;\n\n  @Input()\n  imageSource: string; \n\n  @Input()\n  audioSource: string;\n\n  @Input()\n  wsUrl: string;\n\n  @Input()\n  totalDuration: number;\n\n  spinnerDisplay: string;\n  muted: BehaviorSubject<boolean>;\n\n  private firstTime: BehaviorSubject<boolean>;\n\n  constructor(private mathService: MathService, private eventService: EventService){\n    eventService.Emitter.subscribe((event: C3event) => {\n      if(event){\n        switch(event.type){\n          case EventType.LocalConnectionError: {\n            this.spinnerDisplay = \"none\";\n            this.playing.next(false);\n            this.displayErrorMessage(\"\");\n            break; \n          }\n          case EventType.RemotePlayStarted: {\n            this.spinnerDisplay = \"none\";\n            this.playing.next(true);\n            break;\n          }\n          case EventType.RemotePlayPaused: {\n            this.playing.next(false);\n            break;\n          }\n          case EventType.RemotePlayStopped: {\n            this.playedTime = 0;\n            this.firstTime.next(true);\n            this.playing.next(false);\n            break;\n          }\n          case EventType.RemotePlayEnded: {\n            this.playing.next(false);\n            this.playedTime = 0;\n            break;\n          }\n          case EventType.RemotePlaySeeked: {\n            this.spinnerDisplay = \"none\";\n            this.playedTime = event.value.seekTime;\n            break;\n          }\n          case EventType.RemoteSeekFailed: {\n            this.spinnerDisplay = \"none\";\n            this.playing.next(false);\n            this.displayErrorMessage(\"\");\n            break; \n          }\n          case EventType.RemotePlayResumed: {\n            this.spinnerDisplay = \"none\";\n            this.playing.next(true);\n            break;\n          }\n          case EventType.LocalAudioLevel: {\n            if(event.value && event.value.action){\n              switch(event.value.action){\n                case \"mute\":{\n                  this.muted.next(true);\n                  break;\n                }\n                case \"unmute\":{\n                  this.muted.next(false);\n                  break;\n                }\n                default:{\n                  console.error(\"Received unknown Local Audio Level event: %s\", event.value.action);\n                }\n              }\n            }else{\n              console.error(\"Received incorrect Local Audio Level event: %s\", JSON.stringify(event));\n            }\n            break;\n          }\n          case EventType.LocalAudioLevelError:{\n            this.displayErrorMessage(\"\");\n            break;\n          }\n          case EventType.RemotePlayFailed: {\n            this.spinnerDisplay = \"none\";\n            this.playing.next(false);\n            break;\n          }\n          case EventType.RemoteConnectionReset: {\n            this.spinnerDisplay = \"none\";\n            this.firstTime.next(true);\n            this.playing.next(false);\n            this.playedTime = 0;\n          }\n          default: {\n            console.error(\"Unrecognized event type '%s'\", event.type);\n          }\n        }\n      } \n    });\n  }\n\n  ngOnInit() {\n    //Initializing global variables\n    this.firstTime = new BehaviorSubject<boolean>(true);\n    this.wsConnected = new BehaviorSubject<boolean>(false);\n    this.muted = new BehaviorSubject<boolean>(false);\n    this.playedTime = 0;\n    this.offset = Math.round(this.totalDuration / 100);\n    if(this.offset < 1000){\n      this.offset = 1000;\n    }\n    if(this.offset > 4000){\n      this.offset = 4000;\n    }\n    this.playing = new BehaviorSubject<boolean>(false);\n    this.tooltipDisplay.nativeElement.style.display = \"none\";\n    this.spinnerDisplay = \"none\";\n\n    //Play timer\n    this._timer = timer(0,100).pipe(filter(() => this.playing.value === true)).subscribe(t => {\n      this.playedTime += 100;\n      if(this.playedTime >= (this.totalDuration + this.offset)){\n        this.stop();\n      }\n    });\n    \n    //Connection\n    this.ws = new WebSocket(this.wsUrl);\n    this.kurentoService = new KurentoService(this.ws, this.audioSource, this.video, this.eventService);\n\n    //WebSocket event handling\n    const context = this;\n    this.ws.onopen = (e: Event) => {\n      console.log(\"C3player service: Connection established with Kurento\");\n      context.wsConnected.next(true);\n    }\n    this.ws.onclose = (e: CloseEvent) => {\n      console.log(\"C3Player service: Connection closed\");\n      context.wsConnected.next(false);\n      context.stop();\n    }\n    this.ws.onerror = (e: Event) => {\n      console.error(\"An error has occured: %s\", e);\n      context.stop();\n    }\n    this.ws.onmessage = (e: MessageEvent) => {\n      console.log(\"Message received: \"+e.data);\n      let message = JSON.parse(e.data);\n      switch(message.id){\n        case \"playStarted\":{\n          let event : C3event = {type: EventType.RemotePlayStarted, value: {}};\n          this.eventService.Emitter.next(event);\n          break;\n        }\n        case \"startResponse\": {\n          console.log(\"Received start response\");\n          context.kurentoService.processAnswer(message.sdpAnswer, (error: string) => {\n            if(error){\n              console.error(\"Error processing response: %s\", error);\n            }else{\n              console.log(\"C3Player service: SDP response processed\");\n            }\n          });\n          break;\n        }\n        case \"error\": {\n          console.error(\"Error in websocket: %s\", message.message);\n          break;\n        }\n        case \"playEnd\": {\n          console.log(\"C3Player service: Play ended\");\n          context.firstTime.next(true);\n          context.playing.next(false);\n          context.playedTime = 0;\n          break;\n        }\n        case \"videoInfo\": {\n          context.totalDuration = message.videoDuration;\n          break;\n        }\n        case \"iceCandidate\": {\n          context.kurentoService.addIceCandidate(message.candidate, (error: string) =>{\n            if(error){\n              console.error(\"Error adding candidate: %s\", error);\n            }else{\n              console.log(\"Added candidate %s\", JSON.stringify(message.candidate));\n            }\n          });\n          break;\n        }\n        case \"seek\": {\n          console.log(\"C3Player service: Seek Done -> %s\", message.message);\n          if(message.message !== \"ok\"){\n            this.displayErrorMessage(\"An error has occured\");\n          }\n          break;\n        }\n        case \"position\": {\n          context.playedTime = message.position;\n          break;\n        }\n        default: {\n          console.log(\"C3Player service: Unrecognized message received -> %s\", message.id);\n        }\n      }\n    }\n  }\n\n  ngOnDestroy(){\n    this._timer.unsubscribe();\n    this.kurentoService.resetConnection();\n    this.ws.close();\n  }\n\n  getPlayedHours(): String{\n    return this.mathService.pad(Math.floor(this.playedTime / 3600000));\n  }\n\n  getPlayedMinutes(): String{\n    return this.mathService.pad(Math.floor(((this.playedTime / 1000) % 3600) / 60));\n  }\n\n  getPlayedSeconds(): String{\n    return this.mathService.padm((this.playedTime/1000) % 60);\n  }\n\n  getTotalHours(): String{\n    return this.mathService.pad(Math.floor(this.totalDuration / 3600000));\n  }\n\n  getTotalMinutes(): String{\n    return this.mathService.pad(Math.floor(((this.totalDuration / 1000) % 3600) / 60));\n  }\n\n  getTotalSeconds(): String{\n    return this.mathService.pad(Math.round(this.totalDuration/1000) % 60);\n  }\n\n  getWantedHours(): String{\n    return this.mathService.pad(Math.floor(this.wantedTime / 3600000));\n  }\n\n  getWantedMinutes(): String{\n    return this.mathService.pad(Math.floor(((this.wantedTime / 1000) % 3600) / 60));\n  }\n\n  getWantedSeconds(): String{\n    return this.mathService.pad(Math.floor((this.wantedTime/1000) % 60));\n  }\n\n  getSeekPosition(){\n    return Math.floor((this.playedTime/this.totalDuration)*this.player.nativeElement.offsetWidth);\n  }\n\n  /**\n   * TODO implementar metodos\n   */\n  play(): void{\n    if(this.playing.value === true){\n       //Pause the video\n      this.kurentoService.pause();\n    }else{\n      if(this.firstTime.value === true){\n        //Play\n        this.spinnerDisplay = \"block\";\n        this.firstTime.next(false);\n        this.kurentoService.start(this.playedTime);\n      }else{\n        //Resume\n        this.spinnerDisplay = \"block\";\n        this.kurentoService.resume();\n      }\n    }\n  }\n\n  stop(): void{\n    if(this.wsConnected.value === true){\n      this.kurentoService.unmute();\n      this.kurentoService.stop();\n    }else{\n      this.playedTime = 0;\n      this.firstTime.next(true);\n      this.playing.next(false);\n    }\n  }\n\n  seekClicked(event): void{\n    \n  }\n\n  seekReleased(event: MouseEvent): void{\n    //set playedTime and seekPosition\n    this.spinnerDisplay = \"block\";\n    let clicked: number = Math.floor(this.totalDuration*(event.offsetX/this.player.nativeElement.offsetWidth));\n    this.kurentoService.doSeekAt(clicked);\n  }\n\n  seekDragged(): void{\n    console.log(\"Seek dragged\");\n  }\n\n  onDragStart(event){\n    console.log(\"Drag start\");\n  }\n\n  onDragEnd(event){\n    console.log(\"Drag end\");\n  }\n\n  onMouseOverSeek(event: MouseEvent){\n    this.tooltipDisplay.nativeElement.style.display = \"inline-block\";\n    this.tooltipDisplay.nativeElement.style.transform = \"translate(\"+event.offsetX+\"px,\"+(15+event.offsetY)+\"px)\";\n  }\n\n  onMouseExitSeek(event: MouseEvent){\n    this.tooltipDisplay.nativeElement.style.display = \"none\";\n  }\n\n  onMouseMoveSeek(event: MouseEvent){\n    this.wantedTime = Math.floor(this.totalDuration*(event.offsetX/this.player.nativeElement.offsetWidth));\n    if(this.player.nativeElement.offsetWidth - event.offsetX <= 55){\n      this.tooltipDisplay.nativeElement.style.transform = \"translate(\"+(event.offsetX - 55)+\"px,\"+(15+event.offsetY)+\"px)\";\n    }else{\n      this.tooltipDisplay.nativeElement.style.transform = \"translate(\"+event.offsetX+\"px,\"+(15+event.offsetY)+\"px)\";\n    }\n  }\n\n  displayErrorMessage(error: string) : void{\n\n  }\n\n  switchSound(): void{\n    if(this.muted.value === true){\n      this.kurentoService.unmute();\n    }else{\n      this.kurentoService.mute();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { C3playerComponent } from './c3player.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatSliderModule } from '@angular/material/slider';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    BrowserAnimationsModule,\n    MatSliderModule\n  ],\n  declarations: [C3playerComponent],\n  exports: [\n    C3playerComponent,\n    MatSliderModule,\n    BrowserAnimationsModule\n  ]\n})\nexport class C3playerModule { }\n"]}